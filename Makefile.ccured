# toplevel Makefile for CCured project
# author: George Necula
#

# Debugging. Set ECHO= to debug this Makefile 
ECHO := @

# First stuff that makes the executable 

SOURCEDIRS  := src src/frontc src/ext src/ccured
OBJDIR      := obj/$(ARCHOS)
DEPENDDIR   := obj/.depend
MLLS        := 
MLYS        := 
MODULES     := pretty trace errormsg stats util clist \
               machdep cil logcalls logwrites check ptrnode \
               solveutil solver globinit \
               oneret boxsplit boxstats box markptr \
               unionfind type typecheck papersolve rmtmps optim seoptim
EXECUTABLE  := $(OBJDIR)/ccured
ifdef NATIVECAML
  UNSAFE    := 1
endif
CAMLLIBS    := unix

# Front end stuff
SOURCEDIRS += src/frontc
MLLS       += clexer.mll
MLYS       += cparser.mly
MODULES    += cabs cprint clexer cparser cabs2cil cabsvisit \
              frontc

# Add main late
MODULES    += main


# Additional things to clean
EXTRACLEAN += $(OBJDIR)/*.obj $(OBJDIR)/*.a $(OBJDIR)/*.o

ifneq ($(ARCHOS), x86_WIN32)
  ifneq ($(ARCHOS), x86_LINUX) 
    $(error You must set the ARCHOS variable to either x86_WIN32 or x86_LINUX)
  endif
endif

# Include now the common set of rules for OCAML
# This file will add the rules to make $(EXECUTABLE)$(EXE) along with 
# cleancaml and realcleancaml
include Makefile.ocaml



# sm: this is checked in the outer Makefile, but it won't hurt here
ifndef CCUREDHOME
  $(error You have not defined the CCUREDHOME variable)
endif

CCURED := perl $(CCUREDHOME)/lib/ccured.pl 
PATCHER := perl $(CCUREDHOME)/lib/patcher.pl

# Now do the user-specific customization
# It is Ok if this file does not exist
-include $(CCUREDHOME)/.ccuredrc

# By default use GCC, unless you set MSVC
ifndef _MSVC
  _GNUCC := 1
endif

# Now include the compiler specific stuff
ifdef _MSVC
  include Makefile.msvc
else
  ifdef _GNUCC
    include Makefile.gcc
  endif
endif

# sm: separating release library from release tools
ifdef RELEASELIB
  COMPILEREXT := $(COMPILERNAME)_releaselib
else
  COMPILEREXT := $(COMPILERNAME)_debug
endif


PATCHER +=--mode=$(COMPILERNAME)


CCUREDLIB := $(OBJDIR)/ccured_$(COMPILEREXT).$(LIBEXT)

# garbage collector options
#ifdef _MSVC
#  # No garbage collection on MSVC for now
#NOGC:= 1
#endif

GCLIB := $(CCUREDHOME)/lib/gc/$(COMPILERNAME)/gc.$(LIBEXT)
ifdef _MSVC 
  GCMAKE := make -f Makefile.msvc srcdir=..
else
  # sm: I had to clear MAKEFLAGS before passing because the gc
  # makefile wants to use the implicit rules
  GCMAKE := env MAKEFLAGS= make -f ../Makefile srcdir=..
endif
# pretend it's only dependent on one file; that's not true of course,
# but we rarely (ever?) modify the gc's sources, and one dependency
# is better than none (which causes recompile every time!)
$(GCLIB): $(CCUREDHOME)/lib/gc/mark.c
	cd $(CCUREDHOME)/lib/gc/$(COMPILERNAME); $(GCMAKE)
	cd $(CCUREDHOME)/lib/gc/$(COMPILERNAME); \
            rm -f gc.log; ./gctest; if test -f gc.log ;then cat gc.log; fi

###
###
###    # Now the rules to make the library
###
###
CCUREDLIBARG :=

# RELEASELIB means we try for performance, with terse error messages
# !RELEASELIB means enable more debugging checking, and try to produce
#             better error messages
ifdef RELEASELIB
  CCUREDLIBARG+= $(DEF)RELEASELIB
endif

# _DEBUG means to try to drop into the debugger on failure
ifndef RELEASELIB
  CCUREDLIBARG+= $(DEF)_DEBUG
endif

# NO_FPFAIL_SYSLOG means the syslog(2) call in ccuredlib.c will be omitted
ifdef NO_FPFAIL_SYSLOG
  CCUREDLIBARG+= $(DEF)NO_FPFAIL_SYSLOG
endif

# FP_FAIL_IS_VERBOSE adds line and function info to the failure messages
ifdef FP_FAIL_IS_VERBOSE
  CCUREDLIBARG+= $(DEF)FP_FAIL_IS_VERBOSE
endif

ifdef NO_TAGS
  CCUREDLIBARG+= $(DEF)NO_TAGS
endif

# we build the library from source each time, so that we don't end up
# with .o files built with Makefile arguments that have changed
$(CCUREDLIB): lib/ccuredlib.c lib/ccured.h lib/ccuredcheck.h lib/splay.c $(GCLIB) 
	@echo "Trying to build $(CCUREDLIB)"
	@true "CCUREDLIBARG is $(CCUREDLIBARG)"
	@true "CFLAGS is $(CFLAGS)"
	$(CC) $(CFLAGS) $(INC)./lib $(CONLY) $(CCUREDLIBARG) \
                    $(OBJOUT)$(OBJDIR)/ccuredlib.$(OBJEXT) lib/ccuredlib.c
	$(CC) $(CFLAGS) $(INC)./lib $(CONLY) $(CCUREDLIBARG) \
                    $(OBJOUT)$(OBJDIR)/splay.$(OBJEXT) lib/splay.c
ifdef _GNUCC
	cp -f $(GCLIB) $@
	ar -rs $@                  $(OBJDIR)/ccuredlib.$(OBJEXT) $(OBJDIR)/splay.$(OBJEXT) 
else
	$(AR) $(LIBOUT)$@ $(GCLIB) $(OBJDIR)/ccuredlib.$(OBJEXT) $(OBJDIR)/splay.$(OBJEXT) 
endif

# we need to know what the patcher will think the compiler's version is
COMPILERVERSION := $(shell $(PATCHER) --dumpversion)

# names all of the patched include files, so we can have a proper dependency
PATCHEDHEADERS := $(foreach file, $(PATCH_SYSINCLUDES), \
                    $(CCUREDHOME)/include/$(COMPILERVERSION)/$(file))

######################
.PHONY : presetup all setup includes cleanincludes


libraries: $(CCUREDLIB) $(PATCHEDHEADERS)

all: $(EXECUTABLE)$(EXE) libraries


#foo := $(shell echo "PATCHEDHEADERS = $(PATCHEDHEADERS)" 1>&2; echo hi)

setup:
	$(MAKE) -r -f Makefile.ccured all $(MAKEOVERRIDES) NATIVECAML= 
	$(MAKE) -r -f Makefile.ccured all $(MAKEOVERRIDES) NATIVECAML=1 RELEASELIB=1
ifdef _MSVC
	$(MAKE) -r -f Makefile.ccured libraries _GNUCC=1 NATIVECAML= \
                                             $(MAKEOVERRIDES) 
	$(MAKE) -r -f Makefile.ccured libraries _GNUCC=1 NATIVECAML=1 RELEASELIB=1 \
                                             $(MAKEOVERRIDES) 
endif

quickbuild:  $(EXECUTABLE)$(EXE) libraries

# the patch template file
PATCHTEMPLATE := $(CCUREDHOME)/lib/ccured_$(COMPILERNAME).patch

$(PATCHEDHEADERS): $(CCUREDHOME)/lib/patcher.pl $(PATCHTEMPLATE)
#       throw away all the existing patched includes
	$(PATCHER) --dest=$(CCUREDHOME)/include --clean
#       now re-regenerate them
	$(PATCHER) --patch=$(PATCHTEMPLATE) \
                   --dest=$(CCUREDHOME)/include \
	           $(foreach file,$(PATCH_SYSINCLUDES), --sfile=$(file))


# Documentation generated from latex files using "hevea"
texdoc:
	rm -rf doc/html/ccured
	-mkdir doc/html/ccured
	cd doc/html/ccured; hevea -exec xxdate.exe ../../ccured
	cd doc/html/ccured; hevea -exec xxdate.exe ../../ccured
	cd doc/html/ccured; hacha -o ccuredtoc.html ccured.html
	cd doc/html/ccured; hevea -exec xxdate.exe ../../setup
	cd doc/html/ccured; hevea -exec xxdate.exe ../../setup
	cd doc/html/ccured; hevea -exec xxdate.exe ../../cvssetup
	cd doc/html/ccured; hevea -exec xxdate.exe ../../cvssetup
	cp doc/ccuredindex.html doc/html/ccured/index.html
	cp doc/ccuredheader.html doc/html/ccured

CCUREDHTMLDEST := /usr/local/apache-1.3.22/htdocs/ccured
doc: texdoc
	if test -d $(CCUREDHTMLDEST); then \
           cp -rf doc/html/ccured/* $(CCUREDHTMLDEST); fi

clean: cleancaml
	$(PATCHER) --dest=$(CCUREDHOME)/include --clean
	rm -f $(CCUREDLIB)
	make -C $(CCUREDHOME)/lib/gc clean
	cd $(CCUREDHOME)/lib/gc; \
	     	rm -f $(foreach COMP, GNUCC MSVC, \
                     $(foreach EXT, exe o a obj lib, $(COMP)/*.$(EXT)))
testgc:
	rm -f $(GCLIB)
	make
	objdump --syms $(CCUREDLIB) | grep GC_



##################
###
### CREATE THE DISTRIBUTION
###
#################
DISTRIB_DIR:= TEMP_ccured_distrib

D_ROOT := Makefile Makefile.ccured Makefile.gcc Makefile.msvc .ccuredrc_model

D_LIB := ccured.pl ccured_GNUCC.patch ccured_MSVC.patch \
        fixup.h ccuredlib.c ccured.h ccuredcheck.h ccuredmain.c \
	scaninfer scaninfer.bat \
        splay.c gc

D_SMALL1 := array1.c array2.c alloc.c bitfield.c cast1.c fseq1.c

distrib: 
	rm -f ccured.tar.gz
# Make a CIL distribution
#	make -f Makefile.cil distrib
# Unpack the distribution in our temporary directory
	rm -rf $(DISTRIB_DIR)
	mkdir $(DISTRIB_DIR)
	cd $(DISTRIB_DIR); tar xvfz ../cil.tar.gz
# Remember to rename the Makefile.cil
	mv $(DISTRIB_DIR)/cil $(DISTRIB_DIR)/ccured
	mv $(DISTRIB_DIR)/ccured/Makefile $(DISTRIB_DIR)/ccured/Makefile.cil
# Delete all the documentation
	rm -rf $(DISTRIB_DIR)/ccured/doc/*
# And copy it again
	cp -r doc/html/cil $(DISTRIB_DIR)/ccured/doc	  	
	cp -r doc/html/ccured $(DISTRIB_DIR)/ccured/doc
# Now add the CCured-specific stuff
	cp $(D_ROOT) $(DISTRIB_DIR)/ccured
	cp -r src/ccured $(DISTRIB_DIR)/ccured/src
	make -C lib/gc clean
	cp -r $(patsubst %,lib/%,$(D_LIB)) $(DISTRIB_DIR)/ccured/lib
# Now the tests
	-find test \( \
		-name '*cil.c' -o \
		-name '*cured.c' -o \
                -name '*cured.*optim.c' -o \
		-name '*.exe' -o \
		-name '*.i' -o \
		-name '*_ppp.c' -o \
		-name '*.origi' -o \
		-name '*.o' -o \
		-name '*.obj' -o \
		-name '*cabs.c' -o \
		-name '*infer.c' -o \
		-name '*_all*.c' -o \
		-name '*_comb*.c' \
	\) -exec rm {} \;
	mkdir $(DISTRIB_DIR)/ccured/test/small1
	cp -r $(patsubst %,test/small1/%,$(D_SMALL1)) \
              $(DISTRIB_DIR)/ccured/test/small1
	cp -r test/olden $(DISTRIB_DIR)/ccured/test
