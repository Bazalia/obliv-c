# configure.in for CCured           -*- sh -*-
# Process this file with autoconf to produce a configure script.

# Autoconf runs this through the M4 macroprocessor first; lines
# starting with "dnl" are comments to M4.  The result is a bash
# script; any text which isn't an M4/autoconf directive gets
# copied verbatim to that script.

# also, in general, watch out: the M4 quoting charactes are
# the square brackets: [ and ].  if you want to pass brackets
# to something, you can quote the brackets with more brackets.
# I don't know how to pass a single (unbalanced) bracket ..

# sm: changed this file to use '#' for comments, since that's
# just as good (since this becomes an 'sh' script)

# -------------- usual initial stuff -------------
# this simply names a file somewhere in the source tree to verify
# we're in the right directory
AC_INIT(src/cil.mli)

# make sure I haven't forgotten to run autoconf
if test configure -ot configure.in; then
  AC_MSG_ERROR(configure is older than configure.in; you forgot to run autoconf)
fi

# check for C compiler; this typically finds gcc; it sets the
# variable CC to whatever it finds, which then gets substituted
# for @CC@ in output files; you have to do this even if you don't
# care about @CC@, because system feature tests later on in
# the ./configure script will expect $CC to be set right
AC_PROG_CC



# find system type (using this macro means we must include
# the files install-sh, config.sub, and config.guess (all from
# the autoconf distribution) in our source tree!)
AC_CANONICAL_SYSTEM


# ---------------- generic functions -----------------
# debugging diagnostic; set to 'echo' to debug or 'true' for production
# (technically you're not supposed to use shell functions in
# configure scripts, because some-obscure-sh somewhere doesn't
# support them.. but they're too convenient to not use)
diagnostic() {
  #echo "$@"
  true "$@"
}

# determine if a binary is in the path
binaryExists() {
  # on cygwin, 'which' always returns success, so use 'type' instead
  if type "$1" >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}


# -------------- portable configuration ----------------
# this specifies the root of the source tree; it's just the
# directory where ./configure runs, except on cygwin, which
# overrides this below
CCUREDHOME=`pwd`

# is the microsoft compiler available?
# hmm.. I think we should check the version or something, because
# sometimes people have Common Lisp's interpreter called 'cl' ..
AC_MSG_CHECKING(for msvc cl.exe (optional))
if binaryExists cl; then
  AC_MSG_RESULT(found)
  DEFAULT_COMPILER=_MSVC
  HAS_MSVC=yes
else
  AC_MSG_RESULT(not found)
  HAS_MSVC=no
  DEFAULT_COMPILER=_GNUCC
fi

# is ocaml available?
# needed binaries: ocamllex ocamlyacc ocamldep ocamlopt ocamlc
ocamlDownloadInstructions="
      OCaml can be downloaded from http://caml.inria.fr/ocaml/.
      After downloading and unpacking the source distribution, in the ocaml
      directory, do
        ./configure
        make world
        make opt
        make install
      Then come back here and re-run ./configure."

# required major/minor
reqMaj=3
reqMin=04

# latest known-good major/minor; all versions between 'req'
# and 'known' are expected to be ok
knownMaj=3
knownMin=06

AC_MSG_CHECKING(ocaml version is at least $reqMaj.$reqMin)
if binaryExists ocamlc; then
  # what version?
  ver=`ocamlc -v | grep version | sed 's/^.*version //'`
  diagnostic "ver is $ver"
  # major: anything before the .
  major=`echo $ver | sed 's/\..*$//'`
  diagnostic "major is $major"
  # minor: numbers after the .
  # (the outer level of bracket-quotation protects the inner brackets)
  [minor=`echo $ver | sed 's/[^.]*\.//'`]
  diagnostic "minor is $minor"

  # I would think autoconf would already have a facility for doing
  # these kinds of major/minor version checks, but I can't find it
  if test "$major" -gt $reqMaj -o \
          "$major" -ge $reqMaj -a "$minor" -ge $reqMin; then
    AC_MSG_RESULT([version is $ver, ok])

    # sm: added this test when we found that CCured needed to be changed
    # a little when 3.06 came out (it had previously worked with 3.04)
    if test "$major" -gt $knownMaj -o \
            "$major" -ge $knownMaj -a "$minor" -gt "$knownMin"; then
      AC_MSG_WARN([Your ocaml version is $ver, but the latest version CCured
                   is known to work with is $knownMaj.$knownMin.  If you have
                   trouble compiling, please try using an earlier version
                   or see if there is a later version of CCured.])
    fi
  else
    AC_MSG_ERROR([
      I found OCaml version $ver; CCured requires at least $reqMaj.$reqMin.
      Please download a newer OCaml distribution.
      $ocamlDownloadInstructions
    ])
  fi

  # check for existence of other binaries
  AC_MSG_CHECKING(existence of related ocaml tools)
  if binaryExists ocamllex && \
     binaryExists ocamlyacc && \
     binaryExists ocamldep && \
     binaryExists ocamlopt; then
    AC_MSG_RESULT(ok)
  else
    AC_MSG_ERROR([
      At least one of ocamllex, ocamlyacc, ocamldep or ocamlopt is missing.
      In particular, ocamlopt requires you to "make opt" when building
      OCaml from source.  Please make sure all these tools are built and
      in the path.
    ])
  fi
else
  AC_MSG_ERROR([
      The "ocamlc" OCaml compiler was not found in the path.  Most of
      CCured is written in the OCaml language, so its compiler is required.
      $ocamlDownloadInstructions
  ])
fi

#
# ------------------- Perl ----------------
#
AC_MSG_CHECKING([for Perl])
  perlport=`perl -e "print $^O;"`
  case "$perlport" in
    cygwin)
        ;;
    MSWin32) # ActivePerl
        ;;
    linux)
        ;;
    freebsd)
        ;;
    *)
      AC_MSG_ERROR([
        Unsupported Perl port $perlport -- sorry.
        cygwin, Win32 (ActivePerl) and linux are the supported ports.
      ])
  esac
AC_MSG_RESULT([found port $perlport])

        # The cygwin port has some bugs in the File::Spec module
if test "$perlport" = "cygwin" ;then
  AC_MSG_CHECKING([for known cygwin Perl bug in File::Spec])
  perlfixres=[`perl -e '
      use File::Spec;
      if(File::Spec->file_name_is_absolute("C:/test")) {
        print "no bug found"; exit 0;
      } else {
        print "bug";
        foreach $d (@INC) {
           if(-f "$d/File/Spec/Unix.pm") {
              open(IN, "<$d/File/Spec/Unix.pm");
              open(OUT, ">$d/File/Spec/Unix.pm.fixed") 
                       || die "Cannot open $d/File/Spec/Unix.pm.fixed";
              while(<IN>) {
                if($_ =~ m|sub file_name_is_absolute|) {
                   print OUT $_;
                   print OUT scalar(<IN>);
                   print OUT <<EOF;
   if(\\$^O eq \"cygwin\") { 
       return scalar(\\$file =~ m{^(\\[a-z\\]:)?\\[\\\\\\\\/\\]}is);
};
EOF
                   next;
                }
                print OUT $_;
              }
              close(OUT);
              close(IN);
              system("mv -f $d/File/Spec/Unix.pm.fixed $d/File/Spec/Unix.pm");
           }
        }
      }
  '`]
  # See if it was indeed fixed
  if test "$perlfixres" = "bug" ;then
     perlfixres=`perl -e '
      use File::Spec;
      if(File::Spec->file_name_is_absolute("C:/test")) {
        print "bug fixed"; exit 0;
      } else {
        print "cannot fix bug"; exit 1;
      }'`
  fi
  if test "x$perlfixres" = "x" ;then
      AC_MSG_ERROR([
        Cannot run perl
      ])
  elif test "$perlfixres" = "cannot fix bug" ;then
      AC_MSG_ERROR([
        Found a bug but cannot fix it.
      ])
  else
     AC_MSG_RESULT([$perlfixres])
 fi
fi

# additional tools we might check for:
#   - gnu make

#
# -------------------- GCC --------------
#
#AC_ARG_VAR(gccdir, [The directory containing the gcc executable])
#AC_MSG_CHECKING([for gcc directory])
#if test "x${gccdir}" = "x" ;then
#  # sm: is there a reason the next line used to use 'type' explicitly,
#  # instead of calling binaryExists?  if so it should be commented...
#  if binaryExists "gcc" ;then
#    # Grab the directory they are in
#    gccdir=`dirname \`which gcc\``
#  else
#    AC_MSG_ERROR([Cannot find gcc in your PATH])
#  fi
#fi
#if ! binaryExists "${gccdir}/gcc" ;then
# AC_MSG_ERROR([Cannot find gcc in ${gccdir}])
#fi
#AC_MSG_RESULT(found in $gccdir)
#GCCDIR="$gccdir"

# ----------- some stuff 'autoscan' put here --------------
# (autoscan is part of the autoconf distribution)

# checks for header files
AC_HEADER_STDC
AC_CHECK_HEADERS(strings.h sys/time.h unistd.h)

# checks for typedefs, structures, and compiler characteristics
AC_C_CONST
AC_C_INLINE
AC_HEADER_TIME

# checks for library functions; more autoscan stuff
AC_FUNC_MEMCMP
AC_CHECK_FUNCS(mkdir select socket)



# ----------- platform-specific code -------------
# $target is typically processor-vendor-os
case "$target" in
  # linux
  *86*linux*|*86*freebsd)
    AC_MSG_RESULT(configuring for linux/x86)

    ARCHOS=x86_LINUX
    ;;

  # cygwin
  *86*cygwin*)
    AC_MSG_RESULT(configuring for Cygwin on win32/x86)

    ARCHOS=x86_WIN32

    # override CCUREDHOME; even on cygwin we want forward slashes
    # sm: Ifolded this into what I hope will be the only
    # case-analysis of machine type
    CCUREDHOME=`cygpath -wa $CCUREDHOME  | sed -e "s/\\\\\/\\//g"`
    CC=`which $CC`
    CC=`cygpath -wa $CC  | sed -e "s/\\\\\/\\//g"`
    ;;

  *)
    AC_MSG_ERROR([
      Unsupported platform $target -- sorry.
      Linux/x86 and Win32/Cygwin/x86 are the supported platforms.
    ])
    ;;
esac
CILHOME=$CCUREDHOME

# ----------------- finish up -------------------
# names of the variables that get substituted in files; for example,
# write @ARCHOS@ somewhere in a written file to get it substituted
AC_SUBST(ARCHOS)
AC_SUBST(CCUREDHOME)
AC_SUBST(CILHOME)
AC_SUBST(HAS_MSVC)
AC_SUBST(DEFAULT_COMPILER)

# finish the configure script and generate various files; ./configure
# will apply variable substitutions to <filename>.in to generate <filename>;
# I find it useful to mark generated files as read-only so I don't
# accidentally edit them (and them lose my changes when ./configure
# runs again); I had originally done the chmod after AC_OUTPUT, but
# the problem is then the chmod doesn't run inside ./config.status

# MY_AC_CONFIG_FILES(filename)
# do AC_CONFIG_FILES(filename, chmod a-w filename)
define([MY_AC_CONFIG_FILES],
[{
  if test -f [$1].in; then
    AC_CONFIG_FILES([$1], chmod a-w [$1])
  else
    true
    #echo "skipping [$1] because it's not in this distribution"
  fi
}])
define([MY_AC_CONFIG_EXE_FILES],
[{
  if test -f [$1].in; then
    AC_CONFIG_FILES([$1], [chmod a-w,a+x $1])
  else
    true
    #echo "skipping [$1] because it's not in this distribution"
  fi
}])

MY_AC_CONFIG_FILES(Makefile)
MY_AC_CONFIG_FILES(test/Makefile)
MY_AC_CONFIG_FILES(Makefile.cil)
MY_AC_CONFIG_EXE_FILES(bin/cilly.bat)
MY_AC_CONFIG_EXE_FILES(bin/patcher.bat)
MY_AC_CONFIG_EXE_FILES(bin/ccured.bat)
MY_AC_CONFIG_EXE_FILES(bin/scaninfer.bat)
MY_AC_CONFIG_FILES(bin/CilConfig.pm)

AC_OUTPUT()

# show the user what the variables have been set to
cat <<EOF

CCured/CIL configuration:
  architecture/OS:            ARCHOS             $ARCHOS
  source tree root:           CCUREDHOME         $CCUREDHOME
  (optional) cl.exe found:    HAS_MSVC           $HAS_MSVC
  gcc to use                  CC                 $CC
  default compiler            DEFAULT_COMPILER   $DEFAULT_COMPILER
EOF
