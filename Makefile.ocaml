#*
#* Description:
#*
#* Copyright (c) 2000 by
#*  George C. Necula	necula@cs.berkeley.edu
#*   
#* All rights reserved.  Permission to use, copy, modify and distribute
#* this software for research purposes only is hereby granted, 
#* provided that the following conditions are met: 
#* 1.  Redistributions of source code must retain the above copyright notice, 
#* this list of conditions and the following disclaimer. 
#* 2. Redistributions in binary form must reproduce the above copyright notice, 
#* this list of conditions and the following disclaimer in the documentation 
#* and/or other materials provided with the distribution. 
#* 3. The name of the authors may not be used to endorse or promote products derived from 
#* this software without specific prior written permission. 
#*
#* DISCLAIMER:
#* THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR IMPLIED 
#* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
#* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
#* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
#* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS 
#* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
#* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#*
#*

  # Generic Makefile for Ocaml projects
  # Written by necula@cs.berkeley.edu
  # 
  # Set the following before including this file
  # 
  # ARCHOS     - the architecture x86_WIN32, x86_LINUX
  # RELEASE    - if set then will use the native compiler
  # CAMLUSEUNIX- if set then will link the unix library
  # UNSAFE     - if set then will turn off safety checks (only with RELEASE)

  # SOURCEDIRS - the source directories
  # OBJDIR     - the directory where to put all object files
  # MLLS       - the base names of .mll files (no directory)
  # MLYS       - the base names of .mly files (no directory)
  # MODULES    - the base names of the modules in the order in which they
  #              must be linked
  # EXECUTABLE - the name of the executable to create
  #
  # EXTRACLEAN - additional things to pass to "rm" for the "clean" target
CAMLLEX = ocamllex
CAMLYACC= ocamlyacc -v
CAMLDEP = ocamldep

CAMLFLAGS    =-I $(OBJDIR)

# sm: two styles for echoing compilation progress:
#   style 1, by George:
#     - print English descriptions of what's happening
#     - set ECHO to "" to see *everything*
#   style 2, by Scott:
#     - do not print English descriptions
#     - print every shell command that is executed which has a side effect,
#       so that they could be pasted into a shell to reproduce manually
#     - omit some of the details of dependency generation
#
# to be able to choose which style, several variables are used:
#   @$(NARRATIVE)  - put this before English descriptions for style 1
#   @$(COMMAND)    - put this before shell commands which are to be
#                    printed for style 2; the command is *not* executed
#   $(AT)          - put this before shell commands which are to be executed,
#                    and also printed in style 2
#   $(ECHO)        - use in place of '@' for things not printed in either style
ifdef ECHOSTYLE_SCOTT
  # 'true' silently consumes its arguments, whereas 'echo' prints them
  NARRATIVE   := true           
  COMMAND     := echo
  AT          := 
  ECHO        := @
else
  NARRATIVE   := echo
  COMMAND     := true
  # change these next two definitions to <empty> to echo everything,
  # or leave as @ to suppress echoing
  AT          := @
  ECHO        := @
endif


ifdef PROFILE
# RELEASE	= 1
 CAMLC          = ocamlopt -p $(COMPILEFLAGS)
 CAMLLINK       = ocamlopt -p $(LINKFLAGS)
 CMO            = cmx
 CMXA           = cmxa
 EXEEXT         = .asm
 MOVEAFTERCAMLC = cmi cmx $(OBJ)
else
ifdef RELEASE
 #foo := $(shell echo "I am in RELEASE mode" >&2; echo whatever)
 CAMLC          = ocamlopt $(COMPILEFLAGS)
 CAMLLINK       = ocamlopt $(LINKFLAGS)
 CMO            = cmx
 CMXA           = cmxa
 EXEEXT         = .asm
 MOVEAFTERCAMLC = cmi cmx $(OBJ)
 COMPILETOWHAT  = native code
 # sm: by adding -native in release mode, we prevent spurious
 # dependencies on .cmo files which were causing lots of
 # extra recompilation
 CAMLDEP        = ocamldep -native
else 
 CAMLC          = ocamlc -g $(COMPILEFLAGS)
 CAMLLINK       = ocamlc -custom -g $(LINKFLAGS)
 CMO            = cmo
 CMXA           = cma
 EXEEXT         = .byte
 MOVEAFTERCAMLC = cmi cmo
 COMPILETOWHAT  = bytecode
endif
endif

ifdef UNSAFE 
 CAMLC          := $(CAMLC) -unsafe -noassert
endif


EXE		= $(EXEEXT).exe
OBJ   	= o
ifdef CAMLUSEUNIX
  UNIXLIBS	+= unix.$(CMXA) -cclib -lunix
endif


export EXE


#  Libs to use - include the Num libs
CAMLLIBS += nums.$(CMXA) $(PARSELIBS) $(UNIXLIBS) -cclib -lnums

    # Allow searching for .ml and .mli
vpath %.mll $(SOURCEDIRS)
vpath %.mly $(SOURCEDIRS)
vpath %.ml  $(SOURCEDIRS) $(OBJDIR)
vpath %.mli $(SOURCEDIRS) $(OBJDIR)

DEPENDDIR  = $(OBJDIR)/.depend

#  Secondaries are intermediates that we don't want make to delete
#  By giving the right names to secondary files we tell make where to make
#  them if they are not already made. VERY USEFUL!!
.SECONDARY : $(MLLS:%.mll=$(OBJDIR)/%.ml) $(MLYS:%.mly=$(OBJDIR)/%.ml) \
             $(MLYS:%.mly=$(OBJDIR)/%.mli)

             # Run the lexer generator
             # Move the result to the OBJDIR directory
             # If there is a .mli file in the same directory with .mll then
             # copy it to OBJDIR (where the .ml) file will live.
$(OBJDIR)/%.ml: %.mll
	$(CAMLLEX) $<
	$(AT)mv -f $(basename $<).ml $(OBJDIR)
	$(ECHO)if test -f $(basename $<).mli ;then \
	  $(COMMAND) cp -f $(basename $<).mli $(OBJDIR); \
	  cp -f $(basename $<).mli $(OBJDIR) \
        ;fi

             # Run the parser generator
             # Move the result to the $(OBJDIR) directory.
$(OBJDIR)/%.ml $(OBJDIR)/%.mli: %.mly
	$(CAMLYACC) $(CAMLYACCFLAGS) $<
	$(AT)mv -f $(basename $<).ml $(basename $<).mli $(OBJDIR)

         # Compile an MLI file
$(OBJDIR)/%.cmi: %.mli
	@$(NARRATIVE) Compiling interface $<
	$(AT)$(CAMLC) $(CAMLFLAGS) -c $<
	$(ECHO)if test $(OBJDIR) != $(<D) ;then \
                   $(COMMAND) mv -f $(basename $<).cmi $(OBJDIR); \
                   mv -f $(basename $<).cmi $(OBJDIR) \
        ;fi

         # Compile an ML file
$(OBJDIR)/%.$(CMO): %.ml
	@$(NARRATIVE) "Compiling $< to $(COMPILETOWHAT)"
	$(ECHO)if test $(OBJDIR) != $(<D) ;then \
                 if test -f $(OBJDIR)/$(*F).cmi ;then \
                      $(COMMAND) mv -f $(OBJDIR)/$(*F).cmi $(<D); \
                      mv -f $(OBJDIR)/$(*F).cmi $(<D) \
                 ;fi \
        ;fi
	@$(COMMAND) $(CAMLC) $(CAMLFLAGS) -c $<
	$(ECHO)if $(CAMLC) $(CAMLFLAGS) -c $< ;then \
	   if test $(OBJDIR) != $(<D) ;then \
              if test -f $(basename $<).cmi ;then \
                $(COMMAND) mv -f $(foreach ext,$(MOVEAFTERCAMLC), $(basename $<).$(ext)) $(OBJDIR); \
                mv -f $(foreach ext,$(MOVEAFTERCAMLC), $(basename $<).$(ext)) \
                      $(OBJDIR) \
              ;fi \
           ;fi ; exit 0 \
        ;else \
	   if test $(OBJDIR) != $(<D) ;then \
                $(COMMAND) mv -f $(foreach ext,$(MOVEAFTERCAMLC), $(basename $<).$(ext)) $(OBJDIR); \
                mv -f $(foreach ext,$(MOVEAFTERCAMLC), $(basename $<).$(ext)) \
                      $(OBJDIR) \
           ;fi ; exit 1 \
        ;fi

             # Compile C files
$(OBJDIR)/%.$(OBJ): %.c
	@$(NARRATIVE) Compiling C file $<
	$(AT)$(CAMLC) $(CAMLFLAGS) -c $<
	$(AT)mv -f $(basename $<).$(OBJ) $(OBJDIR)

             # Linking
$(EXECUTABLE)$(EXE) : $(MODULES:%=$(OBJDIR)/%.$(CMO)) 
	@$(NARRATIVE) Linking $(COMPILETOWHAT) $@
	$(AT)$(CAMLLINK) -o $@ $(CAMLLIBS) $^


#	Phonies should be "remade" even if someone mistakenly creates them
.PHONY: clean realclean
cleancaml:
# AB: The profiler junk must be cleared too (gmon.sum, gmon.out)
	-find $(OBJDIR)/../test -name "gmon.?u?" -exec rm {} \;
	-rm -f $(foreach ext, cmi cmo cmx cmxa exe sum, $(OBJDIR)/*.$(ext))
	-rm -f $(OBJDIR)/*.$(OBJ)
	-rm -f $(EXECUTABLE)$(EXE)
	-rm -f camlprim0.obj  $(EXTRACLEAN)
	-rm -f src/frontc/clexer.ml
	@echo " "
	@echo "doing 'make realclean' always because our build process has issues.."
	-rm -f $(DEPENDDIR)/*.d $(DEPENDDIR)/*.di
	-rm -f $(MLLS:%.mll=$(OBJDIR)/%.ml) \
               $(MLLS:%.mll=$(OBJDIR)/%.mli) \
               $(MLYS:%.mly=$(OBJDIR)/%.ml) \
               $(MLYS:%.mly=$(OBJDIR)/%.mli)

# sm: I added that reminder to 'clean' after spending 20 minutes debugging
# the build process until I discovered that stale dependency files were 
# killing my builds; the reminder would have made 'make realclean' the 2nd
# thing to try, thus saving 20 minutes

realcleancaml: clean
	-rm -f $(DEPENDDIR)/*.d $(DEPENDDIR)/*.di
	-rm -f $(MLLS:%.mll=$(OBJDIR)/%.ml) \
               $(MLLS:%.mll=$(OBJDIR)/%.mli) \
               $(MLYS:%.mly=$(OBJDIR)/%.ml) \
               $(MLYS:%.mly=$(OBJDIR)/%.mli)

# Automatic dependency generation (see GNU info for details)
#
# Each .ml file has a .d (dependency file) which is automatically
# generated and included by the rules below.  The perl script replaces
# directory paths with $(OBJDIR)/
#
# Dependencies for .mli files reside in corresponding .di files.
#

FIXDEPEND:=perl -e 'while(<>) { s%[^/\\ :]+[/\\]% %g; s%([^ :\\\n]+)%\$$(OBJDIR)/$$1%g; print $$_;}'
# FIXDEPEND:=cat
DEPINCLUDES= -I $(OBJDIR) $(SOURCEDIRS:%=-I %)
$(DEPENDDIR)/%.d: %.ml
	@$(NARRATIVE) Generating dependency information for $<
	@$(COMMAND) $(CAMLDEP) $(DEPINCLUDES) $<
	$(ECHO)$(CAMLDEP) $(DEPINCLUDES) $< | $(FIXDEPEND) > $@

$(DEPENDDIR)/%.di: %.mli
	@$(NARRATIVE) Generating dependency information for $<
	@$(COMMAND) $(CAMLDEP) $(DEPINCLUDES) $<
	$(ECHO)$(CAMLDEP) $(DEPINCLUDES) $< | $(FIXDEPEND) > $@

ifndef CLEANING
#foo := $(shell echo "MODULES = $(MODULES)" 1>&2; echo whatever)
#foo := $(shell echo "RELEASE = $(RELEASE)" 1>&2; echo whatever)
-include $(MODULES:%=$(DEPENDDIR)/%.d)
-include $(MODULES:%=$(DEPENDDIR)/%.di)
endif


