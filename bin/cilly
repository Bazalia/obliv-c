#!/usr/bin/perl
# A simple use of the Cilly module
#
#
#
# Copyright (c) 2001 by
#  George C. Necula	necula@cs.berkeley.edu
#  Scott McPeak        smcpeak@cs.berkeley.edu
#  Wes Weimer          weimer@cs.berkeley.edu
#   
# All rights reserved.  Permission to use, copy, modify and distribute
# this software for research purposes only is hereby granted, 
# provided that the following conditions are met: 
# 1. Redistributions of source code must retain the above copyright notice, 
# this list of conditions and the following disclaimer. 
# 2. Redistributions in binary form must reproduce the above copyright notice, 
# this list of conditions and the following disclaimer in the documentation 
# and/or other materials provided with the distribution. 
# 3. The name of the authors may not be used to endorse or promote products 
# derived from  this software without specific prior written permission. 
#
# DISCLAIMER:
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR 
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS 
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
use strict;
use Data::Dumper;
use FindBin;
use lib "$FindBin::Bin";
# Read the configuration script
use CilConfig;

use Cilly;

$::default_is_merge = 0;
my $stub = CilCompiler->new(@ARGV);

# print Dumper($stub);
$stub->doit();


# Define here your favorite compiler by overriding Merger methods
package CilCompiler;
use File::Basename;
use strict;
BEGIN {
    @CilCompiler::ISA = qw(Cilly);
    $CilCompiler::base = "$::cilhome/obj/$::archos/cilly";
    # Use the most recent version of cilly
    $CilCompiler::mtime_asm = int((stat("$CilCompiler::base.asm.exe"))[9]);
    $CilCompiler::mtime_byte = int((stat("$CilCompiler::base.byte.exe"))[9]);
    $CilCompiler::compiler = 
        $CilCompiler::base . 
            ($CilCompiler::mtime_asm >= $CilCompiler::mtime_byte 
             ? ".asm.exe" : ".byte.exe");
}

# We need to customize the collection of arguments
sub collectOneArgument {
    my($self, $arg, $pargs) = @_;
    if($arg =~ m|--transval=(.+)$|)  {
        $self->{TRANSVAL} = $1; return 1;
    }
    # See if the super class understands this
    return $self->SUPER::collectOneArgument($arg, $pargs);
}

sub usage {
    print "cilly [options] [gcc_or_mscl arguments]\n";
}

sub helpMessage {
    my($self) = @_;
    # Print first the original
    $self->SUPER::helpMessage();
    print <<EOF;

  All other arguments starting with -- are passed to the Cilly process.

The following are the arguments of the Cilly process
EOF
   my $cmd = $CilCompiler::compiler . " -help";
   $self->runShell($cmd); 
}


sub CillyCommand {
    my ($self, $ppsrc, $dir, $base) = @_;

    my $aftercil = "$dir$base" . "cil.c";
    return ($CilCompiler::compiler . " --out $aftercil", $aftercil);
}

1;
