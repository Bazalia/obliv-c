# -*- Mode: makefile -*-
# Makefile for the cil wrapper
# @do_not_edit@ Makefile.cil.in
#
# author: George Necula

# Debugging. Set ECHO= to debug this Makefile 
.PHONY: setup quickbuild doc distrib machdep cilversion
ECHO = @

all:  quickbuild cillib

# look out for outdated Makefile; if it's out of date, this will automatically
# re-run ./config.status, then re-exec make with the same arguments
Makefile.cil: Makefile.cil.in config.status
	./config.status

config.status: configure.in
	./configure

@DEFAULT_COMPILER@=1



ifdef RELEASE
  NATIVECAML := 1
  UNSAFE     := 1
endif

ifndef ARCHOS
   ARCHOS=@ARCHOS@
endif

# Put here all the byproducts of make
OBJDIR      := obj/$(ARCHOS)
DEPENDDIR   := obj/.depend


    # Now rules to make cilly
CILLY_MODULES = pretty errormsg trace stats util clist \
              cabs cabsvisit cprint cparser clexer  \
              cilversion machdep cil formatparse formatlex formatcil cabs2cil \
              patch frontc check mergecil logcalls logwrites rmtmps \
	      callgraph epicenter heapify stackoverflow \
              canonicalize testcil maincil
CILLY_CMODULES =
CILLY_LIBS     = unix str

SOURCEDIRS  += src src/frontc src/ext
MLLS        += clexer.mll formatlex.mll
MLYS        += cparser.mly formatparse.mly
MODULES     += $(CILLY_MODULES) libmaincil



    # Include now the common set of rules for OCAML
include Makefile.ocaml


   # Now the rule to make cilly

PROJECT_EXECUTABLE = $(OBJDIR)/cilly$(EXE)
PROJECT_MODULES    = $(CILLY_MODULES)
PROJECT_CMODULES   = $(CILLY_CMODULES)
PROJECT_LIBS       = $(CILLY_LIBS)
cilly: $(PROJECT_EXECUTABLE)
include Makefile.ocaml.build


quickbuild: cilversion machdep cilly

# Setup also makes the native code versions
#
# sm: cillib is only built with NATIVECAML=1 because it builds libcil.a,
# which requires native-code .cmx compiled modules... could break it
# into two targets so we build cil.cma both ways, but no one is using
# cil.cma now so I'll leave it alone
setup: cilversion machdep
	$(MAKE) -r -f Makefile.cil cilly $(MAKEOVERRIDES) NATIVECAML= 
	$(MAKE) -r -f Makefile.cil cilly $(MAKEOVERRIDES) NATIVECAML=1
	$(MAKE) -r -f Makefile.cil cillib $(MAKEOVERRIDES) NATIVECAML=1

# Create the machine dependency module
# If the cl command cannot be run then the MSVC part will be identical to GCC
.PHONY : machdep
machdep: $(OBJDIR)/machdep.ml 
$(OBJDIR)/machdep.ml : src/machdep.c
	rm -f $@
	echo "(* This module was generated automatically by code in Makefile.cil and machdep.c *)" >$@
# Now generate the type definition
	echo "type mach = {" >> $@
	echo "  sizeof_short: int;      (* Size of \"short\" *)"       >> $@
	echo "  sizeof_int: int;        (* Size of \"int\" *)"         >> $@
	echo "  sizeof_long: int ;      (* Size of \"long\" *)"        >> $@
	echo "  sizeof_longlong: int;   (* Size of \"long long\" *)"   >> $@
	echo "  sizeof_ptr: int;        (* Size of pointers *)"        >> $@
	echo "  sizeof_enum: int;       (* Size of enum types *)"      >> $@
	echo "  sizeof_longdouble: int; (* Size of \"long double\" *)" >> $@
	echo "  sizeof_sizeof: int;     (* Size of \"sizeof(T)\" *)"   >> $@
	echo "  sizeof_wchar: int;      (* Size of \"wchar_t\" *)"     >> $@
	echo "  sizeof_void: int;       (* Size of \"void\" *)"        >> $@
	echo "  alignof_longlong: int;  (* Alignment of \"long long\" *)" >> $@
	echo "  alignof_double: int;    (* Alignment of \"double\" *)" >> $@
	echo "  alignof_longdouble: int;  (* Alignment of \"long double\" *)" >> $@
	echo "  char_is_unsigned: bool; (* Whether \"char\" is unsigned *)">> $@
	echo "}" >> $@ 	
	if ! gcc -D_GNUCC $< -o $(OBJDIR)/machdep.exe ;then \
            rm -f $@; exit 1 \
        ;fi
	echo "let gcc = {" >>$@
	$(OBJDIR)/machdep.exe >>$@
	echo "}"          >>$@
	if cl /D_MSVC $< /Fe$(OBJDIR)/machdep.exe ;then \
           echo "let hasMSVC = true" >>$@ \
        ;else \
           echo "let hasMSVC = false" >>$@ ;fi
	echo "let msvc = {" >>$@
	$(OBJDIR)/machdep.exe >>$@
	echo "}"          >>$@

#
# Create the version information module
.PHONY: cilversion 
cilversion: $(OBJDIR)/cilversion.ml
$(OBJDIR)/cilversion.ml: configure.in
	rm -f $@
	echo "(* This module was generate automatically by code in Makefile *)" >$@
# Generate here the version information
	echo "let cilVersionMajor = @CIL_VERSION_MAJOR@" >>$@
	echo "let cilVersionMinor = @CIL_VERSION_MINOR@" >>$@
	echo "let cilVersionRev   = @CIL_VERSION_REV@"   >>$@
	echo "let cilVersion      = \"@CIL_VERSION@\""  >>$@ 

# build two libraries
.PHONY: cillib
cillib: $(OBJDIR)/cil.$(CMXA) $(OBJDIR)/libcil.a

OCAML_CIL_LIB_MODULES := $(CILLY_MODULES)

# list of modules to use for building a library; remove 'maincil'
# and add 'libmaincil'
OCAML_CIL_C_LIB_MODULES := $(CILLY_MODULES:maincil=) libmaincil

# Build an OCAML library (CMA / CMXA) that exports our Cil stuff
$(OBJDIR)/cil.$(CMXA): $(OCAML_CIL_LIB_MODULES:%=$(OBJDIR)/%.$(CMO))
	$(CAMLLINK) -a -o $@ $^

# sm: for Simon: build a library of CIL functions which can
# be called from C code; this is like the target above, except
# it is callable from C instead of from Ocaml
ifeq ($(NATIVECAML),1)
$(OBJDIR)/libcil.a: $(OCAML_CIL_C_LIB_MODULES:%=$(OBJDIR)/%.$(CMO))
	ocamlopt -output-obj -o $@ unix.cmxa str.cmxa $^
else
$(OBJDIR)/libcil.a:
	@echo "Can only build $@ when NATIVECAML is 1."
	exit 2
endif

# Test cil
ifdef _MSVC
TESTCILARG=--MSVC --testcil "bash msvctestcil"
else
TESTCILARG=       --testcil "bash gcctestcil"
endif

.PHONY: testcil
testcil: $(EXECUTABLE)$(EXE)	
	       cd test; ../$(EXECUTABLE)$(EXE) $(TESTCILARG)

.PHONY: odoc texdoc

# Documentation generated by "ocamldoc"
odoc:
	-rm -rf doc/html/cil/api
	-mkdir doc/html/cil/api
	ocamldoc -d doc/html/cil/api -v -stars \
             -html \
             -t "CIL API Documentation (version @CIL_VERSION@)" \
	     -I $(OBJDIR) \
                    src/pretty.mli src/errormsg.mli src/clist.mli \
	  	    src/stats.mli src/cil.mli src/formatcil.mli

# Documentation generated from latex files using "hevea"
texdoc:
	-rm -rf doc/html/cil
	-mkdir doc/html/cil
	-mkdir doc/html/cil/examples
# Create the version document
	cd doc; perl cilcode.pl cil.tex >cilpp.tex
	cd doc/html/cil; echo "\def\cilversion{@CIL_VERSION@}" >cil.version
	cd doc/html/cil; hevea -exec xxdate.exe ../../cilpp
	cd doc/html/cil; hevea -exec xxdate.exe ../../cilpp
	cd doc/html/cil; mv cilpp.html cil.html
	cd doc/html/cil; hacha -o ciltoc.html cil.html
	cp doc/cilindex.html doc/html/cil/index.html
	cp doc/cilheader.html doc/html/cil

doc: texdoc odoc


#----------------------------------------------------------------------
# Generate the CIL distribution
# This will create a file cil.tar.gz. It includes the HTML documentation 
# so that people can use it even if they don't have ocamldoc, hevea etc. 

.PHONY: distrib distrib-nocheck checkdistrib
CIL_TAR_GZ:=cil-@CIL_VERSION@.tar.gz
## Make a distribution and check it
distrib: distrib-nocheck checkdistrib

# Work in a temporary directory
TEMP_DIR = TEMP_cil-distrib

# The tar archive members will be relative to this directory
TOP_DIR = $(TEMP_DIR)/cil

DISTRIB_ROOT = README LICENSE INSTALL Makefile.cil.in  \
               Makefile.ocaml Makefile.ocaml.build \
	       configure configure.in install-sh config.guess config.sub  

DISTRIB_SRC = pretty.ml pretty.mli errormsg.ml errormsg.mli \
              trace.ml trace.mli stats.ml stats.mli \
              util.ml clist.ml clist.mli \
	      cil.ml cil.mli check.ml check.mli \
	      rmtmps.ml rmtmps.mli formatlex.mll formatparse.mly \
	      formatcil.mli formatcil.ml testcil.ml \
	      mergecil.ml mergecil.mli maincil.ml machdep.c \
	      libmaincil.ml

DISTRIB_SRC_FRONTC = cabs.ml cprint.ml clexer.mli clexer.mll \
		     cparser.mly \
		     cabs2cil.ml cabs2cil.mli frontc.ml frontc.mli \
	             cabsvisit.mli cabsvisit.ml patch.mli patch.ml

DISTRIB_SRC_EXT = logcalls.ml logcalls.mli \
                  astslicer.ml simplemem.ml heap.ml partial.ml \
                  logwrites.ml heapify.ml callgraph.ml callgraph.mli \
                  epicenter.ml epicenter.mli \
	          stackoverflow.mli stackoverflow.ml \
	          canonicalize.ml canonicalize.mli

DISTRIB_LIB = Cilly.pm

DISTRIB_BIN = CilConfig.pm.in cilly cilly.bat.in \
              patcher patcher.bat.in

DISTRIB_SMALL1=hello.c func.c init.c init1.c wchar1.c vararg1.c testharness.h 

distrib-nocheck: doc
        # Create the distribution from scratch
	rm -rf $(TEMP_DIR)
	mkdir $(TEMP_DIR)

	rm -rf $(CIL_TAR_GZ)
	mkdir $(TOP_DIR) \
	      $(TOP_DIR)/src \
              $(TOP_DIR)/src/frontc \
              $(TOP_DIR)/src/ext \
              $(TOP_DIR)/obj \
              $(TOP_DIR)/doc \
	      $(TOP_DIR)/lib \
	      $(TOP_DIR)/bin \
	      $(TOP_DIR)/doc/api \
              $(TOP_DIR)/obj/.depend \
              $(TOP_DIR)/obj/x86_WIN32 \
              $(TOP_DIR)/obj/x86_LINUX \
              $(TOP_DIR)/test \
              $(TOP_DIR)/test/small1

	cp $(patsubst %,%,$(DISTRIB_ROOT)) $(TOP_DIR)
        # Add a new Makefile which invokes Makefile.cil
	echo "#This Makefile is a wrapper for Makefile.cil">$(TOP_DIR)/Makefile
	echo "setup: setup" >>$(TOP_DIR)/Makefile
	echo "%: " >>$(TOP_DIR)/Makefile
# note that we have a TAB in the next line
	echo '	if ! test -f Makefile.cil ;then echo Run configure first ;fi'>>$(TOP_DIR)/Makefile
	echo '	$$(MAKE) -f Makefile.cil $$*' >>$(TOP_DIR)/Makefile

	cp $(patsubst %,src/%,$(DISTRIB_SRC)) $(TOP_DIR)/src
	cp $(patsubst %,src/ext/%,$(DISTRIB_SRC_EXT)) $(TOP_DIR)/src/ext
	cp $(patsubst %,src/frontc/%,$(DISTRIB_SRC_FRONTC)) \
		$(TOP_DIR)/src/frontc
	cp $(patsubst %,lib/%,$(DISTRIB_LIB)) $(TOP_DIR)/lib
	cp $(patsubst %,bin/%,$(DISTRIB_BIN)) $(TOP_DIR)/bin
	cp $(patsubst %,test/small1/%,$(DISTRIB_SMALL1)) $(TOP_DIR)/test/small1

	cp -r doc/html/cil/* $(TOP_DIR)/doc
# Delete all CVS directories
	if find $(TEMP_DIR) -name CVS -print >cvss.txt ; then \
            rm -rf `cat cvss.txt` ;fi
# Now make the TAR ball
	cd $(TEMP_DIR); tar cfz $(CIL_TAR_GZ) cil
	mv $(TEMP_DIR)/$(CIL_TAR_GZ) .

#	rm -rf $(TEMP_DIR)

## Check a distribution
checkdistrib:
	cd $(TOP_DIR) && ./configure && $(MAKE) && $(MAKE) quicktest


## Publish the distribution
CILHTMLDEST=/usr/local/apache-1.3.22/htdocs/cil
publish_distrib: doc
	if test -d $(CILHTMLDEST); then \
           cp -rf doc/html/cil/* $(CILHTMLDEST); \
           cp -f $(CIL_TAR_GZ) $(CILHTMLDEST)/distrib; \
           ln -sf $(CILHTMLDEST)/distrib/$(CIL_TAR_GZ) $(CILHTMLDEST)/distrib/cil-latest.tar.gz ; \
	fi

clean: cleancaml
	rm -f $(OBJDIR)/machdep.ml


test/%: 
	bin/cilly -c test/small1/$*.c -o test/small1/$*.o

testrun/%: 
	bin/cilly test/small1/$*.c -o test/small1/$*
	test/small1/$*



.PHONY: quicktest
quicktest: $(patsubst %,test/%,func init init1) \
           $(patsubst %,testrun/%,hello wchar1 vararg1)

.PHONY: check
check: quicktest
