# Makefile for the cil wrapper
# @do_not_edit@ Makefile.cil.in
#
# author: George Necula

# Debugging. Set ECHO= to debug this Makefile 
.PHONY: setup quickbuild doc distrib machdep
ECHO = @

# Directory containing the *.cm[io] files for odoc.
ODOC_DIR=/usr/local/src/ocamldoc
CILHTMLDEST=/usr/local/apache-1.3.22/htdocs/cil

ifdef RELEASE
  NATIVECAML := 1
  UNSAFE     := 1
endif

ifndef ARCHOS
   ARCHOS=@ARCHOS@
endif

# Put here all the byproducts of make
OBJDIR      := obj/$(ARCHOS)
DEPENDDIR   := obj/.depend


    # Now rules to make cilly
CILLY_MODULES = pretty errormsg trace stats util clist \
              cabs cprint clexer cparser cabsvisit \
              machdep cil cabs2cil \
              frontc check logcalls logwrites rmtmps \
	      heapify testcil maincil
CILLY_CMODULES =
CILLY_LIBS     = unix

SOURCEDIRS  += src src/frontc src/ext
MLLS        += clexer.mll
MLYS        += cparser.mly
MODULES     += $(CILLY_MODULES)



   # Now the stuff for merger
MERGER_MODULES  = pretty errormsg stats util \
              cabs cprint cabsvisit merger clexer cparser \
              mainmerger
MERGER_CMODULES = 
MERGER_LIBS     = unix

# No need to add anything new to SOURCEDIRS, MLLS, MLYS
MODULES += merger mainmerger

    # Include now the common set of rules for OCAML
include Makefile.ocaml


   # Now the rule to make cilly

PROJECT_EXECUTABLE = $(OBJDIR)/cilly$(EXE)
PROJECT_MODULES    = $(CILLY_MODULES)
PROJECT_CMODULES   = $(CILLY_CMODULES)
PROJECT_LIBS       = $(CILLY_LIBS)
cilly: $(PROJECT_EXECUTABLE)
include Makefile.ocaml.build

   # And rules to make the merger
PROJECT_EXECUTABLE = $(OBJDIR)/merger$(EXE)
PROJECT_MODULES    = $(MERGER_MODULES)
PROJECT_CMODULES   = $(MERGER_CMODULES)
PROJECT_LIBS       = $(MERGER_LIBS)
merger: $(PROJECT_EXECUTABLE)
include Makefile.ocaml.build


quickbuild: machdep cilly merger

# Setup also makes the native code versions
setup: machdep
	$(MAKE) -r -f Makefile.cil cilly merger $(MAKEOVERRIDES) NATIVECAML= 
	$(MAKE) -r -f Makefile.cil cilly merger $(MAKEOVERRIDES) NATIVECAML=1

# Create the machine dependency module
# If the cl command cannot be run then the MSVC part will be identical to GCC
.PHONY : machdep
machdep: $(OBJDIR)/machdep.ml 
$(OBJDIR)/machdep.ml : src/machdep.c
	rm -f $@
	echo "(* This module was generated automatically by code in machdep.c *)" >$@
	if ! gcc -D_GNUCC $< -o $(OBJDIR)/machdep.exe ;then \
            rm -f $@; exit 1 \
        ;fi
	echo "module GCC = struct" >>$@
	$(OBJDIR)/machdep.exe >>$@
	echo "end"          >>$@
	if cl /D_MSVC $< /Fe$(OBJDIR)/machdep.exe ;then \
           echo "let hasMSVC = true" >>$@ \
        ;else \
           echo "let hasMSVC = false" >>$@ ;fi
	echo "module MSVC = struct" >>$@
	$(OBJDIR)/machdep.exe >>$@
	echo "end"          >>$@


all:  quickbuild cillib
# Build an OCAML library (CMA / CMXA) that exports our Cil stuff
cillib: $(OBJDIR)/cil.$(CMXA)

OCAML_CIL_LIB_MODULES = $(MODULES:main=)
$(OBJDIR)/cil.$(CMXA): $(OCAML_CIL_LIB_MODULES:%=$(OBJDIR)/%.$(CMO))
	$(CAMLLINK) -a -o $@ $^

# Test cil
ifdef _MSVC
TESTCILARG=--MSVC --testcil "bash msvctestcil"
else
TESTCILARG=       --testcil "bash gcctestcil"
endif

.PHONY: testcil
testcil: $(EXECUTABLE)$(EXE)	
	       cd test; ../$(EXECUTABLE)$(EXE) $(TESTCILARG)

.PHONY: odoc texdoc

# Documentation generated by "ocamldoc"
odoc:
	-rm -rf doc/html/cil/api
	-mkdir doc/html/cil/api
	ocamldoc -d doc/html/cil/api -v -stars \
             -html \
             -t "CIL API Documentation" \
	     -I obj src/cil.mli src/errormsg.mli src/clist.mli \
	  	    src/pretty.mli src/stats.mli
	if test -d $(CILHTMLDEST)/api; then \
           cp -rf doc/html/cil/api/* $(CILHTMLDEST)/api; fi

# Documentation generated from latex files using "hevea"
texdoc:
	-rm -rf doc/html/cil
	-mkdir doc/html/cil
	-mkdir doc/html/cil/examples
	cd doc; perl cilcode.pl cil.tex >cilpp.tex
	cd doc/html/cil; hevea -exec xxdate.exe ../../cilpp
	cd doc/html/cil; hevea -exec xxdate.exe ../../cilpp
	cd doc/html/cil; mv cilpp.html cil.html
	cd doc/html/cil; hacha -o ciltoc.html cil.html
	cp doc/cilindex.html doc/html/cil/index.html
	cp doc/cilheader.html doc/html/cil
	if test -d $(CILHTMLDEST); then \
           cp -rf doc/html/cil/* $(CILHTMLDEST); fi

doc: texdoc odoc

#----------------------------------------------------------------------
# Generate the CIL distribution
# This will create a file cil.tar.gz. It includes the HTML documentation 
# so that people can use it even if they don't have ocamldoc, hevea etc. 

.PHONY: distrib

# Work in a temporary directory
TEMP_DIR = TEMP_cil-distrib

# The tar archive members will be relative to this directory
TOP_DIR = $(TEMP_DIR)/cil

DISTRIB_ROOT = Makefile.cil.in  \
               Makefile.ocaml Makefile.ocaml.build \
	       configure configure.in install-sh config.guess config.sub  

DISTRIB_SRC = pretty.ml pretty.mli errormsg.ml errormsg.mli \
              trace.ml trace.mli stats.ml stats.mli \
              util.ml clist.ml clist.mli \
	      cil.ml cil.mli check.ml check.mli \
	      rmtmps.ml rmtmps.mli \
	      testcil.ml maincil.ml machdep.c

DISTRIB_SRC_FRONTC = cabs.ml cprint.ml clexer.mli clexer.mll \
		     cparser.mly cabsvisit.ml cabsvisit.mli \
                     merger.ml mainmerger.ml \
		     cabs2cil.ml cabs2cil.mli frontc.ml frontc.mli

DISTRIB_SRC_EXT = logcalls.ml logcalls.mli \
                  logwrites.ml heapify.ml 

DISTRIB_LIB = CompilerStub.pm Merger.pm cilly.pl.in patcher.pl

DISTRIB_SMALL1=hello.c func.c init.c init1.c wchar1.c vararg1.c testharness.h 

distrib: doc
        # Create the distribution from scratch
	rm -rf $(TEMP_DIR)
	mkdir $(TEMP_DIR)

	rm -rf cil.tar.gz
	mkdir $(TOP_DIR) \
	      $(TOP_DIR)/src \
              $(TOP_DIR)/src/frontc \
              $(TOP_DIR)/src/ext \
              $(TOP_DIR)/obj \
              $(TOP_DIR)/doc \
	      $(TOP_DIR)/lib \
	      $(TOP_DIR)/doc/api \
              $(TOP_DIR)/obj/.depend \
              $(TOP_DIR)/obj/x86_WIN32 \
              $(TOP_DIR)/obj/x86_LINUX \
              $(TOP_DIR)/test \
              $(TOP_DIR)/test/small1

	cp $(patsubst %,%,$(DISTRIB_ROOT)) $(TOP_DIR)
        # Add a new Makefile which invokes Makefile.cil
	echo "#This Makefile is a wrapper for Makefile.cil">$(TOP_DIR)/Makefile
	echo "setup: setup" >>$(TOP_DIR)/Makefile
	echo "%: " >>$(TOP_DIR)/Makefile
# note that we have a TAB in the next line
	echo '	if ! test -f Makefile.cil ;then echo Run configure first ;fi'>>$(TOP_DIR)/Makefile
	echo '	make -f Makefile.cil $$*' >>$(TOP_DIR)/Makefile

	cp $(patsubst %,src/%,$(DISTRIB_SRC)) $(TOP_DIR)/src
	cp $(patsubst %,src/ext/%,$(DISTRIB_SRC_EXT)) $(TOP_DIR)/src/ext
	cp $(patsubst %,src/frontc/%,$(DISTRIB_SRC_FRONTC)) \
		$(TOP_DIR)/src/frontc
	cp $(patsubst %,lib/%,$(DISTRIB_LIB)) $(TOP_DIR)/lib
	cp $(patsubst %,test/small1/%,$(DISTRIB_SMALL1)) $(TOP_DIR)/test/small1

	cp -r doc/html/cil/* $(TOP_DIR)/doc
# Delete all CVS directories
	if find $(TEMP_DIR) -name CVS -print >cvss.txt ; then \
            rm -rf `cat cvss.txt` ;fi
# Now make the TAR ball
	cd $(TEMP_DIR); tar cfz cil.tar.gz cil
	mv $(TEMP_DIR)/cil.tar.gz .

	if test -d $(CILHTMLDEST); then \
                cp -f cil.tar.gz $(CILHTMLDEST); fi
#	rm -rf $(TEMP_DIR)

clean: cleancaml
	rm -f $(OBJDIR)/machdep.ml


test/%: 
	perl lib/cilly.pl -c test/small1/$*.c -o test/small1/$*.o

testrun/%: 
	perl lib/cilly.pl test/small1/$*.c -o test/small1/$*
	test/small1/$*



.PHONY: quicktest
quicktest: $(patsubst %,test/%,func init init1) \
           $(patsubst %,testrun/%,hello wchar1 vararg1)
