#ifndef OBLIV_OH
#define OBLIV_OH

struct ProtocolDesc* ocCurrentProto(void);
int ocCurrentParty(void);

void setupOblivBool(OblivInputs* spec, obliv bool* dest, bool v);
void setupOblivChar(OblivInputs* spec, obliv char* dest, char v);
void setupOblivInt(OblivInputs* spec, obliv int* dest, int v);
void setupOblivShort(OblivInputs* spec, obliv short* dest, short v);
void setupOblivLong(OblivInputs* spec, obliv long* dest, long v);
void setupOblivLLong(OblivInputs* spec, obliv long long * dest, long long v);

void feedOblivInputs(OblivInputs* spec, size_t count, int party);

// Single variable feeding convenience functions
obliv bool feedOblivBool(bool v,int party);
obliv char feedOblivChar(char v,int party);
obliv short feedOblivShort(short v,int party);
obliv int feedOblivInt(int v,int party);
obliv long feedOblivLong(long v,int party);
obliv long long feedOblivLLong(long long v,int party);

// Return value true means 'dest' was actually written to.
//   Write may not occur if I am not the intended party, or this is
//   a multithreaded protocol where only one thread writes
bool revealOblivBool(bool* dest, obliv bool src,int party);
bool revealOblivChar(char* dest, obliv char src,int party);
bool revealOblivInt(int* dest, obliv int src,int party);
bool revealOblivShort(short* dest, obliv short src,int party);
bool revealOblivLong(long* dest, obliv long src,int party);
bool revealOblivLLong(long long* dest, obliv long long src,int party);

// TODO make convention consistent with feed
bool ocBroadcastBool(int source,bool v);
char ocBroadcastChar(int source,char v);
int ocBroadcastInt(int source,int v);
short ocBroadcastShort(int source,short v);
long ocBroadcastLong(int source,long v);
long long ocBroadcastLLong(int source,long long v);
#endif
